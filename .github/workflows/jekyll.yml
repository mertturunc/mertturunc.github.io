# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["master"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1' # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
          cache-version: 0 # Increment this number if you need to re-download cached gems
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4
      - name: Build with Jekyll
        # Outputs to the './_site' directory by default
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install Node.js dependencies
        run: |
          npm install
          
      - name: Generate placeholder images
        run: |
          node .github/scripts/generate-placeholders.js
          
      - name: Generate llms.txt
        run: |
          cat > generate_llms.rb << 'RUBY_SCRIPT'
          require "yaml"
          require "fileutils"
          require "date"
          
          config = YAML.load_file("_config.yml")
          site_url = config["url"]
          
          posts = Dir.glob("_posts/**/*.md").map do |post_file|
            content = File.read(post_file)
            parts = content.split("---")
            next if parts.length < 3
            
                          begin
                front_matter = YAML.load(parts[1])
                next unless front_matter
                
                # Skip drafts and hidden posts
                next if front_matter["published"] == false || front_matter["hidden"] == true
                
                # Extract date from filename if not in front matter
              post_date = front_matter["date"]
              if post_date.nil?
                # Try to extract date from filename (YYYY-MM-DD-title.md format)
                filename = File.basename(post_file)
                date_match = filename.match(/^(\d{4}-\d{2}-\d{2})/)
                post_date = Date.parse(date_match[1]) if date_match
              end
              
              next if post_date.nil?
              
              # Extract clean, concise excerpt
              excerpt = front_matter["summary"] || front_matter["excerpt"] || front_matter["description"]
              
              # If no front matter excerpt, extract clean text from content
              if excerpt.nil? && parts[2]
                content_text = parts[2].strip
                # Remove all markdown/HTML formatting
                content_text = content_text.gsub(/<figure>.*?<\/figure>/m, '')
                content_text = content_text.gsub(/<img[^>]*>/i, '')
                content_text = content_text.gsub(/!\[.*?\]\(.*?\)/, '')
                content_text = content_text.gsub(/<[^>]+>/, '')
                content_text = content_text.gsub(/\[.*?\]\(.*?\)/, '')  # Remove links
                content_text = content_text.gsub(/\#{1,6}\s+/, '')  # Remove headers
                content_text = content_text.gsub(/\*\*(.*?)\*\*/, '\1')  # Remove bold
                content_text = content_text.gsub(/\*(.*?)\*/, '\1')  # Remove italic
                content_text = content_text.gsub(/\n+/, ' ').strip
                excerpt = content_text[0..80] + "..." if content_text.length > 0
              end
              
              # Clean up the excerpt if it exists
              if excerpt
                excerpt = excerpt.gsub(/\n+/, ' ').strip[0..80] + "..."
              end
              
              {
                title: front_matter["title"] || "untitled",
                date: post_date,
                url: "/#{post_file.gsub("_posts/", "").gsub(".md", "")}",
                excerpt: excerpt || ""
              }
            rescue => e
              puts "Error processing #{post_file}: #{e.message}"
              next
            end
          end.compact.sort_by { |post| post[:date] }.reverse
          
          content = "# Mert Turunc's Blog\n\n"
          content += "## About\n"
          content += "This is a personal blog and portfolio website showcasing projects, blog posts, and professional information about Mert Turunc.\n\n"
          content += "## Main Content\n"
          content += "The site contains the following main sections:\n"
          content += "- Blog posts about technology, programming, and personal experiences\n"
          content += "- Project showcases and descriptions\n"
          content += "- Technical articles and tutorials\n\n"
          content += "## Important Pages\n"
          content += "- Homepage: #{site_url}\n"
          content += "- Blog: #{site_url}/blog/\n"
          content += "- Projects: #{site_url}/projects/\n\n"
          content += "## Blog Posts\n"
          content += posts.map { |post| 
            "- #{post[:title]} (#{post[:date].strftime("%Y-%m-%d")}): #{post[:excerpt]}"
          }.join("\n") + "\n\n"
          content += "## Content Guidelines\n"
          content += "- All blog posts are written in either Turkish or English\n"
          content += "- Technical content focuses on programming, web development, and technology\n"
          content += "- Project descriptions include implementation details and technologies used\n\n"
          content += "## Last Updated\n"
          content += "Generated at: #{Time.now.strftime("%Y-%m-%d %H:%M:%S UTC")}\n\n"
          content += "## Additional Information\n"
          content += "This file is automatically generated during the build process to help AI models better understand and process the website's content."
          
          output_path = File.join("_site", "llms.txt")
          File.write(output_path, content)
          puts "Generated llms.txt at #{output_path}"
          puts "File will be accessible at: #{site_url}/llms.txt"
          RUBY_SCRIPT
          
          ruby generate_llms.rb
          rm generate_llms.rb
      - name: Upload artifact
        # Automatically uploads an artifact from the './_site' directory by default
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-24.04
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

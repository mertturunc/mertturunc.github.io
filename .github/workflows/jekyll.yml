# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["master"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1' # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
          cache-version: 0 # Increment this number if you need to re-download cached gems
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4
      - name: Build with Jekyll
        # Outputs to the './_site' directory by default
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production
      - name: Generate llms.txt
        run: |
          ruby -e '
            require "yaml"
            require "fileutils"
            
            config = YAML.load_file("_config.yml")
            site_url = config["url"]
            
            posts = Dir.glob("_posts/**/*.md").map do |post_file|
              content = File.read(post_file)
              front_matter = YAML.load(content.split("---")[1])
              {
                title: front_matter["title"],
                date: front_matter["date"],
                url: "/#{post_file.gsub("_posts/", "").gsub(".md", "")}",
                excerpt: front_matter["excerpt"] || front_matter["description"] || content.split("---")[2].strip[0..200] + "..."
              }
            end.sort_by { |post| post[:date] }.reverse
            
            content = <<~MARKDOWN
              # Mert Turunç\'s Blog
              
              ## About
              This is a personal blog and portfolio website showcasing projects, blog posts, and professional information about Mert Turunç.
              
              ## Main Content
              The site contains the following main sections:
              - Blog posts about technology, programming, and personal experiences
              - Project showcases and descriptions
              - Professional information and resume
              - Technical articles and tutorials
              
              ## Important Pages
              - Homepage: #{site_url}
              - Blog: #{site_url}/blog/
              - Projects: #{site_url}/projects/
              
              ## Blog Posts
              #{posts.map { |post| 
                "- [#{post[:title]}](#{site_url}#{post[:url]}) - #{post[:date].strftime("%Y-%m-%d")}\n  #{post[:excerpt]}"
              }.join("\n\n")}
              
              ## Content Guidelines
              - All blog posts are written in either Turkish or English
              - Technical content focuses on programming, web development, and technology
              - Project descriptions include implementation details and technologies used
              
              ## Last Updated
              Generated at: #{Time.now.strftime("%Y-%m-%d %H:%M:%S UTC")}
              
              ## Additional Information
              This file is automatically generated during the build process to help AI models better understand and process the website\'s content.
            MARKDOWN
            
            File.write(File.join("_site", "llms.txt"), content)
            puts "Generated llms.txt in _site directory"
          '
      - name: Upload artifact
        # Automatically uploads an artifact from the './_site' directory by default
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-24.04
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
